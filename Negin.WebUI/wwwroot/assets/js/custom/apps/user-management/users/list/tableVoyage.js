"use strict"; var KTUsersList = function () { var t, e = document.getElementById("kt_datatable_responsive"), n = () => { e.querySelectorAll('[data-kt-voyages-table-filter="close_row"]').forEach(t => { t.addEventListener("click", function (t) { t.preventDefault(); let e = t.target.closest("tr"), n = e.querySelectorAll("td")[0].innerText, o = $(e.querySelector('.id[type="hidden"]')).val(); Swal.fire({ text: "Are you sure you want to close " + n + "?", icon: "warning", showCancelButton: !0, buttonsStyling: !1, confirmButtonText: "Yes, close!", cancelButtonText: "No, cancel", customClass: { confirmButton: "btn fw-bold btn-danger", cancelButton: "btn fw-bold btn-active-light-primary" } }).then(function (t) { t.isConfirmed ? $.ajax({ url: "/BasicInfo/ToggleVoyageStatus", type: "GET", data: { id: o }, success: function (t) { t.state ? Swal.fire({ text: "You have closed " + t.message + "!.", icon: "success", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }).then(function () { location.reload() }).then(function () { }) : Swal.fire({ text: t.message + "!.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }) } }) : Swal.fire({ text: " was not closed.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }) }) }) }), e.querySelectorAll('[data-kt-voyages-table-filter="open_row"]').forEach(t => { t.addEventListener("click", function (t) { t.preventDefault(); let e = t.target.closest("tr"), n = e.querySelectorAll("td")[0].innerText, o = $(e.querySelector('.id[type="hidden"]')).val(); Swal.fire({ text: "Are you sure you want to open " + n + "?", icon: "warning", showCancelButton: !0, buttonsStyling: !1, confirmButtonText: "Yes, open!", cancelButtonText: "No, cancel", customClass: { confirmButton: "btn fw-bold btn-success", cancelButton: "btn fw-bold btn-active-light-primary" } }).then(function (t) { t.isConfirmed ? $.ajax({ url: "/BasicInfo/ToggleVoyageStatus", type: "GET", data: { id: o }, success: function (t) { t.state ? Swal.fire({ text: "You have opened " + t.message + "!.", icon: "success", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }).then(function () { location.reload() }).then(function () { }) : Swal.fire({ text: t.message + "!.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }) } }) : Swal.fire({ text: " was not opened.", icon: "error", buttonsStyling: !1, confirmButtonText: "Ok, got it!", customClass: { confirmButton: "btn fw-bold btn-primary" } }) }) }) }) }; return { init: function () { let o, r, a; e && (e.querySelectorAll("tbody tr").forEach(t => { let e = t.querySelectorAll("td"), n = e[3].innerText.toLowerCase(), o = 0, r = "minutes"; n.includes("yesterday") ? (o = 1, r = "days") : n.includes("mins") ? (o = parseInt(n.replace(/\D/g, "")), r = "minutes") : n.includes("hours") ? (o = parseInt(n.replace(/\D/g, "")), r = "hours") : n.includes("days") ? (o = parseInt(n.replace(/\D/g, "")), r = "days") : n.includes("weeks") && (o = parseInt(n.replace(/\D/g, "")), r = "weeks"); let a = moment().subtract(o, r).format(); if (e[3].setAttribute("data-order", a), void 0 == e[5]); else { let i = moment(e[5].innerHTML, "DD MMM YYYY, LT").format(); e[5].setAttribute("data-order", i) } }), (t = $(e).DataTable({ info: !1, order: [], pageLength: 10, lengthChange: !1, columnDefs: [{ orderable: !1, targets: 0 }, { orderable: !1, targets: 4 },] })).on("draw", function () { n() }), document.querySelector('[data-kt-user-table-filter="reset"]').addEventListener("click", function () { document.querySelector('[data-kt-user-table-filter="form"]').querySelectorAll("select").forEach(t => { $(t).val("").trigger("change") }), t.search("").draw() }), n(), r = (o = document.querySelector('[data-kt-user-table-filter="form"]')).querySelector('[data-kt-user-table-filter="filter"]'), a = o.querySelectorAll("select"), r.addEventListener("click", function () { var e = ""; a.forEach((t, n) => { t.value && "" !== t.value && (0 !== n && (e += " "), e += t.value) }), t.search(e).draw() })) } } }(); KTUtil.onDOMContentLoaded(function () { KTUsersList.init() });